// <auto-generated />
using System;
using Animix.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Animix.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.12");

            modelBuilder.Entity("Animix.Domain.Model.Entity.Animation", b =>
                {
                    b.Property<int>("IdAnimation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdAnimation");

                    b.ToTable("animacao");
                });

            modelBuilder.Entity("Animix.Domain.Model.Entity.Character", b =>
                {
                    b.Property<int>("IdCharacter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FkAnimation")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FkOwner")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdCharacter");

                    b.HasIndex("FkAnimation");

                    b.HasIndex("FkOwner");

                    b.ToTable("personagem");
                });

            modelBuilder.Entity("Animix.Domain.Model.Entity.CharacterTransaction", b =>
                {
                    b.Property<int>("IdCharacterTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuyerIdUser")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FkCharacter")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("SellerIdUser")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdCharacterTransaction");

                    b.HasIndex("BuyerIdUser");

                    b.HasIndex("FkCharacter");

                    b.HasIndex("SellerIdUser");

                    b.ToTable("transacoesAnimacoes");
                });

            modelBuilder.Entity("Animix.Domain.Model.Entity.Marketplace", b =>
                {
                    b.Property<int>("IdMarketplace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FkCharacter")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("IdMarketplace");

                    b.HasIndex("FkCharacter")
                        .IsUnique();

                    b.ToTable("anuncios");
                });

            modelBuilder.Entity("Animix.Domain.Model.Entity.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdUser");

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("Animix.Domain.Model.Entity.UserTransaction", b =>
                {
                    b.Property<int>("IdUserTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FkUser")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("IdUserTransaction");

                    b.HasIndex("FkUser");

                    b.ToTable("transacoesUsuario");
                });

            modelBuilder.Entity("Animix.Domain.Model.Entity.Character", b =>
                {
                    b.HasOne("Animix.Domain.Model.Entity.Animation", "Animation")
                        .WithMany("Characters")
                        .HasForeignKey("FkAnimation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Animix.Domain.Model.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("FkOwner");

                    b.Navigation("Animation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Animix.Domain.Model.Entity.CharacterTransaction", b =>
                {
                    b.HasOne("Animix.Domain.Model.Entity.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Animix.Domain.Model.Entity.Character", "Character")
                        .WithMany("CharacterTransactions")
                        .HasForeignKey("FkCharacter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Animix.Domain.Model.Entity.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Character");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Animix.Domain.Model.Entity.Marketplace", b =>
                {
                    b.HasOne("Animix.Domain.Model.Entity.Character", "Character")
                        .WithOne("Marketplace")
                        .HasForeignKey("Animix.Domain.Model.Entity.Marketplace", "FkCharacter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Animix.Domain.Model.Entity.UserTransaction", b =>
                {
                    b.HasOne("Animix.Domain.Model.Entity.User", "User")
                        .WithMany("UserTransactions")
                        .HasForeignKey("FkUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Animix.Domain.Model.Entity.Animation", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Animix.Domain.Model.Entity.Character", b =>
                {
                    b.Navigation("CharacterTransactions");

                    b.Navigation("Marketplace");
                });

            modelBuilder.Entity("Animix.Domain.Model.Entity.User", b =>
                {
                    b.Navigation("UserTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
